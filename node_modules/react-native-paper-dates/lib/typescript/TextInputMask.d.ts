import React, { ReactNode } from 'react';
declare const _default: React.ForwardRefExoticComponent<Omit<import("react-native").TextInputProps & React.RefAttributes<import("react-native").TextInput> & {
    mode?: "flat" | "outlined";
    left?: React.ReactNode;
    right?: React.ReactNode;
    disabled?: boolean;
    label?: import("react-native-paper/lib/typescript/components/TextInput/types").TextInputLabelProp;
    placeholder?: string;
    error?: boolean;
    onChangeText?: Function;
    selectionColor?: string;
    cursorColor?: string;
    underlineColor?: string;
    activeUnderlineColor?: string;
    outlineColor?: string;
    activeOutlineColor?: string;
    textColor?: string;
    dense?: boolean;
    multiline?: boolean;
    numberOfLines?: number;
    onFocus?: (args: any) => void;
    onBlur?: (args: any) => void;
    render?: (props: import("react-native-paper/lib/typescript/components/TextInput/types").RenderProps) => React.ReactNode;
    value?: string;
    style?: import("react-native").StyleProp<import("react-native").TextStyle>;
    theme?: import("react-native-paper/lib/typescript/types").ThemeProp;
    testID?: string;
    contentStyle?: import("react-native").StyleProp<import("react-native").TextStyle>;
    outlineStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
    underlineStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
} & React.RefAttributes<{
    focus: () => void;
    clear: () => void;
    blur: () => void;
    isFocused: () => boolean;
    setNativeProps: (nativeProps: object) => void;
}> & {
    mask: string;
    value: string;
    inputButton: ReactNode;
}, "ref"> & React.RefAttributes<unknown>>;
export default _default;
//# sourceMappingURL=TextInputMask.d.ts.map