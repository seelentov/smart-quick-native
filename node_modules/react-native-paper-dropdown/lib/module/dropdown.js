import { Platform, ScrollView, StatusBar, View } from 'react-native';
import { Menu, TextInput, TouchableRipple } from 'react-native-paper';
import DropdownItem from "./dropdown-item.js";
import DropdownInput from "./dropdown-input.js";
import useDropdown from "./use-dropdown.js";
import { forwardRef, useCallback, useImperativeHandle, useMemo } from 'react';
import DropdownHeader from "./dropdown-header.js";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
function Dropdown(props, ref) {
  const {
    testID,
    menuTestID,
    options,
    mode,
    placeholder,
    label,
    menuUpIcon = /*#__PURE__*/_jsx(TextInput.Icon, {
      icon: 'menu-up',
      pointerEvents: "none"
    }),
    menuDownIcon = /*#__PURE__*/_jsx(TextInput.Icon, {
      icon: 'menu-down',
      pointerEvents: "none"
    }),
    value,
    maxMenuHeight,
    menuContentStyle,
    statusBarHeight = Platform.OS === 'android' ? StatusBar.currentHeight : undefined,
    hideMenuHeader = false,
    Touchable = TouchableRipple,
    disabled = false,
    error = false,
    onSelect,
    CustomDropdownItem = DropdownItem,
    CustomDropdownInput = DropdownInput,
    CustomMenuHeader = DropdownHeader
  } = props;
  const selectedLabel = options.find(option => option.value === value)?.label;
  const {
    enable,
    setEnable,
    toggleMenu,
    onLayout,
    menuStyle,
    scrollViewStyle,
    dropdownLayout
  } = useDropdown(maxMenuHeight);
  const rightIcon = enable ? menuUpIcon : menuDownIcon;
  const contentStyle = useMemo(() => ({
    paddingVertical: 0
  }), []);
  useImperativeHandle(ref, () => ({
    focus() {
      setEnable(true);
    },
    blur() {
      setEnable(false);
    }
  }));
  const resetMenu = useCallback(() => {
    onSelect?.(undefined);
    toggleMenu();
  }, [onSelect, toggleMenu]);
  return /*#__PURE__*/_jsxs(Menu, {
    visible: enable,
    onDismiss: toggleMenu,
    style: menuStyle,
    elevation: 5,
    statusBarHeight: statusBarHeight,
    keyboardShouldPersistTaps: 'handled',
    anchor: /*#__PURE__*/_jsx(Touchable, {
      testID: testID,
      disabled: disabled,
      onPress: toggleMenu,
      onLayout: onLayout,
      children: /*#__PURE__*/_jsx(View, {
        pointerEvents: "none",
        children: /*#__PURE__*/_jsx(CustomDropdownInput, {
          placeholder: placeholder,
          label: label,
          rightIcon: rightIcon,
          selectedLabel: selectedLabel,
          mode: mode,
          disabled: disabled,
          error: error
        })
      })
    }),
    contentStyle: [contentStyle, menuContentStyle],
    testID: menuTestID,
    children: [!hideMenuHeader && /*#__PURE__*/_jsx(CustomMenuHeader, {
      label: label,
      toggleMenu: toggleMenu,
      resetMenu: resetMenu,
      value: value,
      multiSelect: false
    }), /*#__PURE__*/_jsx(ScrollView, {
      style: scrollViewStyle,
      bounces: false,
      children: options.map((option, index) => {
        return /*#__PURE__*/_jsx(CustomDropdownItem, {
          option: option,
          value: value,
          width: dropdownLayout.width,
          toggleMenu: toggleMenu,
          onSelect: onSelect,
          isLast: options.length <= index + 1,
          menuItemTestID: menuTestID ? `${menuTestID}-${option.value}` : ''
        }, option.value);
      })
    })]
  });
}
export default /*#__PURE__*/forwardRef(Dropdown);
//# sourceMappingURL=dropdown.js.map