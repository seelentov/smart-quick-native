"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _reactNativePaper = require("react-native-paper");
var _dropdownInput = _interopRequireDefault(require("./dropdown-input.js"));
var _multiSelectDropdownItem = _interopRequireDefault(require("./multi-select-dropdown-item.js"));
var _useDropdown = _interopRequireDefault(require("./use-dropdown.js"));
var _dropdownHeader = _interopRequireDefault(require("./dropdown-header.js"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function MultiSelectDropdown(props, ref) {
  const {
    testID,
    menuTestID,
    options,
    mode,
    placeholder,
    label,
    menuUpIcon = /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNativePaper.TextInput.Icon, {
      icon: 'menu-up',
      pointerEvents: "none"
    }),
    menuDownIcon = /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNativePaper.TextInput.Icon, {
      icon: 'menu-down',
      pointerEvents: "none"
    }),
    value,
    menuContentStyle = {
      paddingVertical: 0
    },
    maxMenuHeight,
    statusBarHeight = _reactNative.Platform.OS === 'android' ? _reactNative.StatusBar.currentHeight : undefined,
    hideMenuHeader = false,
    Touchable = _reactNativePaper.TouchableRipple,
    disabled = false,
    error = false,
    onSelect,
    CustomMultiSelectDropdownItem = _multiSelectDropdownItem.default,
    CustomMultiSelectDropdownInput = _dropdownInput.default,
    CustomMenuHeader = _dropdownHeader.default
  } = props;
  const selectedLabel = (0, _react.useMemo)(() => options.filter(option => value.includes(option.value)).map(option => option.label).join(', '), [options, value]);
  const {
    enable,
    setEnable,
    toggleMenu,
    onLayout,
    menuStyle,
    scrollViewStyle,
    dropdownLayout
  } = (0, _useDropdown.default)(maxMenuHeight);
  const rightIcon = enable ? menuUpIcon : menuDownIcon;
  (0, _react.useImperativeHandle)(ref, () => ({
    focus() {
      setEnable(true);
    },
    blur() {
      setEnable(false);
    }
  }));
  const resetMenu = (0, _react.useCallback)(() => {
    onSelect?.([]);
    toggleMenu();
  }, [onSelect, toggleMenu]);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNativePaper.Menu, {
    testID: menuTestID,
    visible: enable,
    onDismiss: toggleMenu,
    style: menuStyle,
    elevation: 5,
    statusBarHeight: statusBarHeight,
    keyboardShouldPersistTaps: 'handled',
    anchor: /*#__PURE__*/(0, _jsxRuntime.jsx)(Touchable, {
      testID: testID,
      disabled: disabled,
      onPress: toggleMenu,
      onLayout: onLayout,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
        pointerEvents: "none",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(CustomMultiSelectDropdownInput, {
          placeholder: placeholder,
          label: label,
          rightIcon: rightIcon,
          selectedLabel: selectedLabel,
          mode: mode,
          disabled: disabled,
          error: error
        })
      })
    }),
    contentStyle: menuContentStyle,
    children: [!hideMenuHeader && /*#__PURE__*/(0, _jsxRuntime.jsx)(CustomMenuHeader, {
      label: label,
      toggleMenu: toggleMenu,
      resetMenu: resetMenu,
      value: value,
      multiSelect: true
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
      style: scrollViewStyle,
      bounces: false,
      children: options.map((option, index) => {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(CustomMultiSelectDropdownItem, {
          option: option,
          value: value,
          width: dropdownLayout.width,
          onSelect: onSelect,
          isLast: options.length <= index + 1,
          menuItemTestID: menuTestID ? `${menuTestID}-${option.value}` : ''
        }, option.value);
      })
    })]
  });
}
var _default = exports.default = /*#__PURE__*/(0, _react.forwardRef)(MultiSelectDropdown);
//# sourceMappingURL=multi-select-dropdown.js.map